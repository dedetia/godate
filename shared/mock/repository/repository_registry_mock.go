// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/port/registry/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/dedetia/godate/internal/core/port/repository"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockRepositoryRegistry is a mock of RepositoryRegistry interface.
type MockRepositoryRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryRegistryMockRecorder
}

// MockRepositoryRegistryMockRecorder is the mock recorder for MockRepositoryRegistry.
type MockRepositoryRegistryMockRecorder struct {
	mock *MockRepositoryRegistry
}

// NewMockRepositoryRegistry creates a new mock instance.
func NewMockRepositoryRegistry(ctrl *gomock.Controller) *MockRepositoryRegistry {
	mock := &MockRepositoryRegistry{ctrl: ctrl}
	mock.recorder = &MockRepositoryRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryRegistry) EXPECT() *MockRepositoryRegistryMockRecorder {
	return m.recorder
}

// GetSwipeRepository mocks base method.
func (m *MockRepositoryRegistry) GetSwipeRepository() repository.SwipeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwipeRepository")
	ret0, _ := ret[0].(repository.SwipeRepository)
	return ret0
}

// GetSwipeRepository indicates an expected call of GetSwipeRepository.
func (mr *MockRepositoryRegistryMockRecorder) GetSwipeRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwipeRepository", reflect.TypeOf((*MockRepositoryRegistry)(nil).GetSwipeRepository))
}

// GetUserRepository mocks base method.
func (m *MockRepositoryRegistry) GetUserRepository() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRepository")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// GetUserRepository indicates an expected call of GetUserRepository.
func (mr *MockRepositoryRegistryMockRecorder) GetUserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRepository", reflect.TypeOf((*MockRepositoryRegistry)(nil).GetUserRepository))
}

// WithTransaction mocks base method.
func (m *MockRepositoryRegistry) WithTransaction(ctx context.Context, fn func(mongo.SessionContext) (interface{}, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockRepositoryRegistryMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockRepositoryRegistry)(nil).WithTransaction), ctx, fn)
}
