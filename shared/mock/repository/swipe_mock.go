// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/port/repository/swipe.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/dedetia/godate/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSwipeRepository is a mock of SwipeRepository interface.
type MockSwipeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSwipeRepositoryMockRecorder
}

// MockSwipeRepositoryMockRecorder is the mock recorder for MockSwipeRepository.
type MockSwipeRepositoryMockRecorder struct {
	mock *MockSwipeRepository
}

// NewMockSwipeRepository creates a new mock instance.
func NewMockSwipeRepository(ctrl *gomock.Controller) *MockSwipeRepository {
	mock := &MockSwipeRepository{ctrl: ctrl}
	mock.recorder = &MockSwipeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwipeRepository) EXPECT() *MockSwipeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSwipeRepository) Create(ctx context.Context, request *domain.Swipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSwipeRepositoryMockRecorder) Create(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSwipeRepository)(nil).Create), ctx, request)
}

// GetUserSwipe mocks base method.
func (m *MockSwipeRepository) GetUserSwipe(ctx context.Context, request *domain.UserSwipe) ([]*domain.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSwipe", ctx, request)
	ret0, _ := ret[0].([]*domain.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSwipe indicates an expected call of GetUserSwipe.
func (mr *MockSwipeRepositoryMockRecorder) GetUserSwipe(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSwipe", reflect.TypeOf((*MockSwipeRepository)(nil).GetUserSwipe), ctx, request)
}
